# -*- coding: utf-8 -*-
"""
Created on Sat Feb 27 03:29:43 2021

@author: kazuk
"""
#0-1ナップザック問題
#関数maxは、与えられた荷物の名前と価値と重量からなるタプルのリストAとナップザック問題の重量制限nを受け取り、
#ナップザック問題を解くための動的計画法の表を表示する関数である
#表の各マスは、選ばれた荷物の合計価値と選ばれた荷物の名前のリストのタプルを表現している
def max(A, n):
    B = [(0, [])] * (n + 1) #[(0, []), (0, []), (0, []), (0, [])]を返す(タプルはn+1個)
    for (i, p, w) in A: #Bを荷物の個数回更新することで、動的計画法を実現
    #解を得るために必要なのは最終行の右端だけ、だから表を作る必要はない
        for j in range(n, w - 1, -1): #wよりjが小さいマスでは荷物を選ぶことはできないので調べる必要はない
            if B[j - w][0] + p > B[j][0]: #B[j][0]は表でいうと探索している範囲内で一番右下に当たる
            #B[j][0]と比較してB[j-w][0](重量制限ｊから荷物の重さwを引いた時に選択できる最大価値の荷物とその価値)
                B[j] = (B[j - w][0] + p, B[j - w][1] + [i]) #最大価値の更新、それに伴う選択荷物名の更新
        print(i, B) #各行のprint
        
A = [('A', 400, 5), ('B', 300, 4), ('C', 200, 2), ('D', 300, 1)]
max(A, 5)

