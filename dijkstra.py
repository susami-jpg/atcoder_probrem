# -*- coding: utf-8 -*-
"""
Created on Thu Feb 25 15:26:02 2021

@author: kazuk
"""

#重み付き無向グラフの辺と重みの対応を表現するには、キーが頂点の組で、値が重みであるような、辞書を定義すればよい。
#例
G = {('A', 'B'):1, ('A', 'D'):3,
     ('B', 'C'):1, ('B', 'D'):3, ('B', 'E'):5, 
     ('C', 'E'):3, 
     ('D', 'E'):1,}

#このグラフ表現には二つの注意点がある
#一つは頂点の集合が省略されていること。今回の表現では、辺に隣接していない頂点を表現できない問題がある。最短経路問題を考えるにあたっては、問題ない。
#もう一つがキーが頂点の組なので、('A', 'B')と('B', 'A')が区別されてしまうことである。そこで今回は、重み付き無向グラフを表現する辞書のキーには大小関係x<yを満たす組(x,y)しか登録していない。

#関数shortest_length(G, start)は重み付き無向グラフを表す辞書Gと開始点startを受け取り、最終的に開始点から各頂点への最短路の長さを出力する関数
#重み付き無向グラフGと頂点startについて以下を行う。
#1:startに仮の長さ0を与える。
#2:仮の長さが付加されている頂点がある限り以下を繰り返す。
#3:仮の長さmが最小の頂点xを一つ選び、mを確定値とする。
#4:Gでxy間に辺が存在する頂点yのすべてについて以下を行う
#5:yに仮の長さが付加されているなら、
#   yの仮の長さ > m + 辺xyの重み　ならば、yの仮の長さを m + 辺xyの重み　で上書き
#6:yに仮の長さも確定値も付加されていないのなら、yに仮の長さ　m + 辺xyの重み　を付加する。

def shortest_length(G, start):
    S = {start:0}; D = {} #頂点ごとの最短路の仮の長さを辞書Sに、確定値を辞書Dに格納
    while len(S) > 0:
        x = select_min(S); m = S[x]; del S[x]; D[x] = m #select_minによって辞書S内の最小値のキーを取得し、Dに確定値を渡す
        for (y, w) in edge(G, x): #edge関数は頂点xからつながる頂点yとその重みのリストを返す。
            if y in S:
                if S[y] > m + w:
                    S[y] = m + w
            elif y not in D:
                S[y] = m + w
        print('仮', S, '確定', D)

#select_min(S)は、辞書Sを受け取り、S内の値が最小であるようなキーを返す関数
def select_min(S):
    m = -1
    for a in S: #forループに辞書を渡すとキーがわたされる
        if m == -1 or m > S[a]:
            x = a #最小のキーの更新
            m = S[a] #最小の重みの更新
    return x


#edge(G, x)は、重み付き無向グラフを表す辞書Gと頂点xを受け取り、Gにxとyの間の重みwの辺が存在するようなyとwのタプルのリストを返す関数
def edge(G, x):
    return ([(b, G[(a, b)]) for (a, b) in G if a == x] 
            + [(a, G[(a, b)]) for (a, b) in G if b == x]) #Gに含まれる値が(x, y)でも(y, x)でもよいようにそれぞれの場合の結果を結合して返している。

#(b, G[(a, b)])の値bは頂点xからつながる頂点yを示す。
#G[(a, b)]は辺xyの重みを表す。
#edge関数は頂点xからつながる頂点yとその重みのリストを返す。

shortest_length(G, 'A')
